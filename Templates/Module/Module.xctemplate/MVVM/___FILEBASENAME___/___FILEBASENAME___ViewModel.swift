//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//
//  Template generated by Sawan Kumar
//

import UIKit

class ___VARIABLE_productName:identifier___ViewModel: ___VARIABLE_productName:identifier___ViewModelProtocol {

    weak private var view: ___VARIABLE_productName:identifier___ViewProtocol?
    
    init(interface: ___VARIABLE_productName:identifier___ViewProtocol) {
        self.view = interface
    }

    var inputState: ___VARIABLE_productName:identifier___ViewModelState? {
        didSet {
            guard let inputState = self.inputState else {return}
            switch inputState {
            case .fetch:
                self.view?.viewState = .startLoader
                self.fetch()
            }
        }
    }
    
    var outputState: ___VARIABLE_productName:identifier___ViewModelOutputState? {
        didSet {
            DispatchQueue.main.async { [weak self] in
                guard let `self` = self else {return}
                guard let outputState = self.outputState else {return}
                switch outputState {
                case .empty:
                    self.view?.viewState = .stopLoader
                    self.view?.viewState = .empty
                case .error(let error):
                    self.view?.viewState = .stopLoader
                    self.view?.viewState = .error(error)
                case .populate(let model):
                    self.view?.viewState = .stopLoader
                    self.view?.viewState = .populate(model)
                }
            }
        }
    }
    
    func fetch() {
        self.outputState = .populate(___VARIABLE_productName:identifier___Model())
    }
    
    func route(_ to: String) {
        
    }
}
